// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipfs.proto

package ipfs

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_faea06b5b3eb1738, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Empty)(nil), "ipfs.Empty")
}

func init() { proto.RegisterFile("ipfs.proto", fileDescriptor_faea06b5b3eb1738) }

var fileDescriptor_faea06b5b3eb1738 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0xd2, 0x4f, 0x4a, 0x2b, 0x41,
	0x10, 0x06, 0x70, 0x78, 0xe4, 0x45, 0xa8, 0x4c, 0x10, 0x5b, 0x34, 0x71, 0x10, 0x95, 0x3e, 0xc0,
	0x34, 0x98, 0xa5, 0x3b, 0xc5, 0x3f, 0x83, 0x22, 0xe2, 0x78, 0x81, 0x32, 0xb6, 0xa1, 0x71, 0x66,
	0xaa, 0xe9, 0xae, 0x44, 0xdc, 0xba, 0x74, 0xeb, 0xd1, 0xbc, 0x82, 0x07, 0x91, 0xa9, 0x44, 0x11,
	0x0c, 0x46, 0x74, 0xd7, 0x5d, 0xd4, 0xf7, 0xa3, 0x16, 0x1f, 0x80, 0xf3, 0xb7, 0x31, 0xf3, 0x81,
	0x98, 0x54, 0xab, 0x79, 0xa7, 0x9b, 0x23, 0xa2, 0x51, 0x69, 0x0d, 0x7a, 0x67, 0xb0, 0xae, 0x89,
	0x91, 0x1d, 0xd5, 0xb3, 0x1d, 0xbd, 0x04, 0xff, 0x0f, 0x2b, 0xcf, 0x0f, 0xbb, 0x4f, 0x2d, 0x48,
	0xae, 0x6c, 0xe5, 0x29, 0x60, 0x99, 0x5f, 0x1c, 0x15, 0x6a, 0x0f, 0xda, 0x05, 0x23, 0x8f, 0xa3,
	0xea, 0x64, 0x82, 0xca, 0x5e, 0xfa, 0xf9, 0xa3, 0x7b, 0x8f, 0x2f, 0xaf, 0xcf, 0xff, 0x56, 0xd4,
	0xb2, 0x99, 0x0c, 0x4c, 0x33, 0x37, 0x71, 0x1a, 0x39, 0x85, 0xee, 0x41, 0xb0, 0xc8, 0xf6, 0xdc,
	0xf2, 0x3d, 0x85, 0xbb, 0x6f, 0x8c, 0x1d, 0x31, 0x52, 0xdd, 0xff, 0x30, 0xea, 0x69, 0x26, 0x9a,
	0xa1, 0x10, 0x2a, 0x87, 0xa4, 0x60, 0x0c, 0xbc, 0xd8, 0xda, 0x16, 0x6b, 0x43, 0xf7, 0xbe, 0x5a,
	0xb1, 0x11, 0xd4, 0x31, 0x74, 0x0a, 0x26, 0xbf, 0x58, 0xda, 0x12, 0xa9, 0xaf, 0xd7, 0xe7, 0x49,
	0xe4, 0x55, 0x0e, 0xdd, 0x4b, 0x5b, 0xd1, 0xc4, 0xfe, 0x9d, 0x92, 0x9b, 0x90, 0x7f, 0x0c, 0xa9,
	0xb9, 0x10, 0xb2, 0x3a, 0x81, 0xe4, 0xcc, 0xc5, 0x77, 0x28, 0xfe, 0xee, 0xa4, 0xd2, 0x45, 0xde,
	0x5f, 0x83, 0xd5, 0x61, 0x49, 0xe3, 0x9b, 0x8c, 0x67, 0x8d, 0x90, 0xf0, 0x75, 0x5b, 0x3a, 0x33,
	0x78, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x32, 0xd1, 0xdf, 0x65, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TemporalIPFSClient is the client API for TemporalIPFS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TemporalIPFSClient interface {
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	CreateNetwork(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StartNetwork(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StopNetwork(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	RemoveNetwork(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StatNetwork(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	ListNetworks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type temporalIPFSClient struct {
	cc *grpc.ClientConn
}

func NewTemporalIPFSClient(cc *grpc.ClientConn) TemporalIPFSClient {
	return &temporalIPFSClient{cc}
}

func (c *temporalIPFSClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ipfs.TemporalIPFS/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temporalIPFSClient) CreateNetwork(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ipfs.TemporalIPFS/CreateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temporalIPFSClient) StartNetwork(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ipfs.TemporalIPFS/StartNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temporalIPFSClient) StopNetwork(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ipfs.TemporalIPFS/StopNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temporalIPFSClient) RemoveNetwork(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ipfs.TemporalIPFS/RemoveNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temporalIPFSClient) StatNetwork(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ipfs.TemporalIPFS/StatNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temporalIPFSClient) ListNetworks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ipfs.TemporalIPFS/ListNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemporalIPFSServer is the server API for TemporalIPFS service.
type TemporalIPFSServer interface {
	Status(context.Context, *Empty) (*Empty, error)
	CreateNetwork(context.Context, *Empty) (*Empty, error)
	StartNetwork(context.Context, *Empty) (*Empty, error)
	StopNetwork(context.Context, *Empty) (*Empty, error)
	RemoveNetwork(context.Context, *Empty) (*Empty, error)
	StatNetwork(context.Context, *Empty) (*Empty, error)
	ListNetworks(context.Context, *Empty) (*Empty, error)
}

func RegisterTemporalIPFSServer(s *grpc.Server, srv TemporalIPFSServer) {
	s.RegisterService(&_TemporalIPFS_serviceDesc, srv)
}

func _TemporalIPFS_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemporalIPFSServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipfs.TemporalIPFS/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemporalIPFSServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemporalIPFS_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemporalIPFSServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipfs.TemporalIPFS/CreateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemporalIPFSServer).CreateNetwork(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemporalIPFS_StartNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemporalIPFSServer).StartNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipfs.TemporalIPFS/StartNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemporalIPFSServer).StartNetwork(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemporalIPFS_StopNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemporalIPFSServer).StopNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipfs.TemporalIPFS/StopNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemporalIPFSServer).StopNetwork(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemporalIPFS_RemoveNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemporalIPFSServer).RemoveNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipfs.TemporalIPFS/RemoveNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemporalIPFSServer).RemoveNetwork(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemporalIPFS_StatNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemporalIPFSServer).StatNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipfs.TemporalIPFS/StatNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemporalIPFSServer).StatNetwork(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemporalIPFS_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemporalIPFSServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipfs.TemporalIPFS/ListNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemporalIPFSServer).ListNetworks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _TemporalIPFS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ipfs.TemporalIPFS",
	HandlerType: (*TemporalIPFSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _TemporalIPFS_Status_Handler,
		},
		{
			MethodName: "CreateNetwork",
			Handler:    _TemporalIPFS_CreateNetwork_Handler,
		},
		{
			MethodName: "StartNetwork",
			Handler:    _TemporalIPFS_StartNetwork_Handler,
		},
		{
			MethodName: "StopNetwork",
			Handler:    _TemporalIPFS_StopNetwork_Handler,
		},
		{
			MethodName: "RemoveNetwork",
			Handler:    _TemporalIPFS_RemoveNetwork_Handler,
		},
		{
			MethodName: "StatNetwork",
			Handler:    _TemporalIPFS_StatNetwork_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _TemporalIPFS_ListNetworks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipfs.proto",
}
