syntax = "proto3";
package store;

option java_package = "cloud.temporal.store";

import "google/api/annotations.proto";

// TemporalStore implements Temporal's storage APIs
service TemporalStore {

  /* OBJECT APIs */

  // Upload uploads a stream of blobs - it accepts files and directories
  rpc Upload(stream UploadReq) returns (Object) {
    option (google.api.http) = { post: "/v3/store/objects/upload" };
  };

  // UploadBlob allows the upload of a single blob - if it is too large, an
  // error will be returned
  rpc UploadBlob(UploadReq) returns (Object) {
    option (google.api.http) = { post: "/v3/store/objects/upload/blob" };
  };

  // Download retrieves an object as a stream of blobs
  rpc Download(DownloadReq) returns (stream Blob) {
    option (google.api.http) = { post: "/v3/store/objects/download" };
  };

  // DownloadBlob allows the download of a single blob - if it is too large,
  // an error will be returned
  rpc DownloadBlob(DownloadReq) returns (Blob) {
    option (google.api.http) = { post: "/v3/store/objects/download/blob" };
  };

  // Pin handles new pins and pin extensions
  rpc Pin(Object) returns (Empty) {
    option (google.api.http) = { post: "/v3/store/objects/pin" };
  };

  // Stat retrieves details about an object
  rpc Stat(Object) returns (ObjectStats) {
    option (google.api.http) = { get: "/v3/store/objects/stat" };
  };

  // ListObjects retrieves a list of the authenticated user's objects
  rpc ListObjects(ListObjectsReq) returns (ObjectList) {
    option (google.api.http) = { post: "/v3/store/objects/list" };
  };

  /* IPFS PUBSUB */

  // Publish publishes a message to the requested topic
  rpc Publish(Event) returns (Empty) {
    option (google.api.http) = { post: "/v3/store/pubsub/publish" };
  };

  // Subscribe subscribes to messages from the requested topic
  rpc Subscribe(Topic) returns (stream Event) {
    option (google.api.http) = { get: "/v3/store/pubsub/subscribe" };
  };

  /* IPFS KEYS */

  // Keys returns the IPFS keys associated with an authenticated request
  rpc Keys(Empty) returns (KeyList) {
    option (google.api.http) = { get: "/v3/store/keys" };
  };

  // NewKey generates a new IPFS key associated with an authenticated request.
  rpc NewKey(Key) returns (Empty) {
    option (google.api.http) = { post: "/v3/store/keys/new" };
  };
}

/* MESSAGES */

message Empty { }

message UploadReq {
  Blob blob             = 1;
  int32 hold_time       = 2;
  ObjectOptions options = 3;
}

message DownloadReq {
  Object object = 1;
  ObjectOptions options = 2;
}

message ListObjectsReq {
  repeated string networks = 1;
  repeated string hashes   = 2;
  bool encrypted_only      = 3;
}

message ObjectOptions {
  string passphrase = 1;
  string network    = 2;
}

message KeyList { repeated Key keys = 1; }

message ObjectList { repeated ObjectInfo objects = 2; }

/* MODELS */

message Blob {
  bytes content   = 1;
  int64 hold_time = 2;
}

message Object {
  string hash = 1;
}

message ObjectStats {
  int32 block_size      = 1;
  int32 cumulative_size = 2;
  int32 data_size       = 3;
  int32 links_size      = 4;
  int32 link_count      = 5;
}

message ObjectInfo {
  Object object     = 1;
  ObjectStats stats = 2;

  message Details {
    int64 created_at = 1;
    int64 deleted_at = 2;
    int64 updated_at = 3;
    bool encrypted   = 4;
    int32 hold_time  = 5;
    string type      = 6;
  }
  Details details = 3;

  message Permissions {
    string uploader = 1;
    repeated string users = 2;
  }
  Permissions perms = 4;
}

message Event {
  Topic topic = 1;
  string message = 2;
}

message Topic {
  string topic   = 1;
  string network = 2;
}

message Key {
  message RSA {
    enum Size {
      S_2048 = 0;
      S_3072 = 1;
      S_4096 = 2;
    }
    Size size = 1;
  }
  message ED25519 {
    enum Size {
      S_256 = 0;
    }
    Size size = 1;
  }

  oneof type {
    RSA rsa         = 1;
    ED25519 ed25519 = 2;
  }
  string name = 3;
  string id   = 4;
}
