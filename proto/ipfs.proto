syntax = "proto3";
package ipfs;

option java_package = "cloud.temporal.ipfs";

import "google/api/annotations.proto";

// TemporalIPFS implements Temporal's IPFS management APIs, most notably private
// networks.
service TemporalIPFS {
  // CreateNetwork creates a new hosted IPFS network
  rpc CreateNetwork(CreateNetworkReq) returns (NetworkDetails) {
    option (google.api.http) = { post: "/v3/ipfs/networks/create" };
  };

  // StartNetwork spins up a previously created IPFS network
  rpc StartNetwork(Network) returns (Empty) {
    option (google.api.http) = { post: "/v3/ipfs/networks/start" };
  };

  // StopNetwork shuts down an IPFS network
  rpc StopNetwork(Network) returns (Empty) {
    option (google.api.http) = { post: "/v3/ipfs/networks/stop" };
  };

  // RemoveNetwork deletes an IPFS network
  rpc RemoveNetwork(Network) returns (Empty) {
    option (google.api.http) = { post: "/v3/ipfs/networks/stop" };
  };

  // NetworkInfo retrieves information about a network
  rpc NetworkInfo(Network) returns (NetworkDetails) {
    option (google.api.http) = { get: "/v3/ipfs/networks/stat" };
  };

  // ListNetworks retrieves a list of the authenticated user's networks
  rpc ListNetworks(Empty) returns (NetworkList) {
    option (google.api.http) = { post: "/v3/ipfs/networks/list" };
  };
}

message Empty { }

message CreateNetworkReq {
  Network network                 = 1;
  string swarm_key                = 2;
  repeated string bootstrap_peers = 3;
  repeated string users           = 4;
}

message Network {
  string name = 1;
}

message NetworkList { repeated Network networks = 1; }

/* MODELS */

message NetworkDetails {
  int32 id         = 1;
  int64 created_at = 2;
  int64 deleted_at = 3;
  int64 activated  = 4;

  string name           = 5;
  string swarm_key      = 6;
  repeated string users = 7;
  repeated string peers = 8;
}
