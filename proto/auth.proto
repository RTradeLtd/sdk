syntax = "proto3";
package auth;

option java_package = "cloud.temporal.auth";

import "google/api/annotations.proto";

// TemporalAuth implements Temporal's authentication and account management APIs
service TemporalAuth {

  // Register facilitates user creation.
  rpc Register(RegisterReq) returns (User) {
    option (google.api.http) = { post: "/v3/auth/register" };
  };

  // Recover facilitates account recovery.
  rpc Recover(RecoverReq) returns (User) {
    option (google.api.http) = { post: "/v3/auth/recover" };
  };

  // Login accepts credentials and returns a token for use with further requests.
  rpc Login(Credentials) returns (Token) {
    option (google.api.http) = { post: "/v3/auth/login" };
  };

  // Account returns the account associated with an authenticated request.
  rpc Account(Empty) returns (User) {
    option (google.api.http) = { get: "/v3/auth/account" };
  };

  // Update facilitates modification of the account associated with an
  // authenticated request.
  rpc Update(UpdateReq) returns (User) {
    option (google.api.http) = { post: "/v3/auth/update" };
  };

  // Refresh provides a refreshed token associated with an authenticated request.
  rpc Refresh(Empty) returns (Token) {
    option (google.api.http) = { post: "/v3/auth/refresh" };
  };
}

message Empty { }

message RegisterReq {
  Credentials credentials = 1;
  string email_address    = 2;
}

message RecoverReq {
  enum Type {
    USERNAME = 0;
    PASSWORD = 1;
  }
  Type type            = 1;
  string email_address = 2;
}

message UpdateReq {
  message Password {
    string old_password = 1;
    string new_password = 2;
  }
  message Tier {
    Tier new_tier = 1;
  }

  oneof update {
    Password password_change = 1;
    Tier tier_change         = 2;
  }
}

/* MODELS */

message Credentials {
  string username = 1;
  string password = 2;
}

message Token {
  int64 expire = 1;
  string token = 2;
}

enum Tier {
  FREE    = 0;
  LIGHT   = 1;
  PARTNER = 9;

  reserved 2 to 8;
}

message User {
  uint64 id            = 1;
  string user_name     = 2;
  string email_address = 3;

  // account properties
  bool verified                 = 4;
  double credits                = 5;
  map<string, string> ipfs_keys = 6;
  repeated string ipfs_networks = 7;
  Tier tier                     = 8;

  // account access
  bool api_access   =  9;
  bool admin_access = 10;
}
